#!/usr/bin/env python3
"""
Script de validation des notebooks DVF
Teste l'ex√©cution de tous les notebooks dans l'ordre correct
"""

import subprocess
import sys
import os
from pathlib import Path
import json
import time

def run_notebook(notebook_path):
    """Ex√©cute un notebook et retourne le status"""
    print(f"\n{'='*60}")
    print(f"üîÑ Ex√©cution de {notebook_path.name}")
    print(f"{'='*60}")
    
    start_time = time.time()
    
    try:
        # Ex√©cuter le notebook avec nbconvert
        result = subprocess.run([
            'C:/Users/vtnde/Documents/Projets/ProjetFoncier/venv/Scripts/jupyter.exe', 'nbconvert', 
            '--to', 'notebook',
            '--execute',
            '--inplace',
            '--ExecutePreprocessor.timeout=300',
            str(notebook_path)
        ], capture_output=True, text=True, timeout=600)
        
        execution_time = time.time() - start_time
        
        if result.returncode == 0:
            print(f"‚úÖ SUCC√àS - {notebook_path.name} ({execution_time:.1f}s)")
            return True, None, execution_time
        else:
            print(f"‚ùå ERREUR - {notebook_path.name}")
            print(f"STDERR: {result.stderr}")
            return False, result.stderr, execution_time
            
    except subprocess.TimeoutExpired:
        execution_time = time.time() - start_time
        print(f"‚è∞ TIMEOUT - {notebook_path.name} ({execution_time:.1f}s)")
        return False, "Timeout after 10 minutes", execution_time
    except Exception as e:
        execution_time = time.time() - start_time
        print(f"üí• EXCEPTION - {notebook_path.name}: {str(e)}")
        return False, str(e), execution_time

def validate_notebooks():
    """Valide tous les notebooks dans l'ordre"""
    
    # D√©finir l'ordre d'ex√©cution
    notebooks_order = [
        '01_preprocessing.ipynb',
        '02_analysis.ipynb', 
        '03_visualizations.ipynb',
        '04_recommendations.ipynb'
    ]
    
    # Chemin vers les notebooks
    notebooks_dir = Path(__file__).parent / 'notebooks'
    
    if not notebooks_dir.exists():
        print(f"‚ùå Dossier notebooks non trouv√©: {notebooks_dir}")
        return False
    
    print("üéØ VALIDATION DES NOTEBOOKS DVF")
    print("="*60)
    print(f"üìÅ Dossier: {notebooks_dir}")
    print(f"üìã Notebooks √† tester: {len(notebooks_order)}")
    
    results = {}
    total_time = 0
    overall_success = True
    
    for notebook_name in notebooks_order:
        notebook_path = notebooks_dir / notebook_name
        
        if not notebook_path.exists():
            print(f"‚ùå Notebook non trouv√©: {notebook_path}")
            results[notebook_name] = {'success': False, 'error': 'File not found', 'time': 0}
            overall_success = False
            continue
        
        success, error, exec_time = run_notebook(notebook_path)
        total_time += exec_time
        
        results[notebook_name] = {
            'success': success,
            'error': error,
            'time': exec_time
        }
        
        if not success:
            overall_success = False
            print(f"‚ö†Ô∏è  Arr√™t √† cause de l'erreur dans {notebook_name}")
            break
    
    # R√©sum√© final
    print(f"\n{'='*60}")
    print("üìä R√âSUM√â DE LA VALIDATION")
    print(f"{'='*60}")
    
    for notebook_name, result in results.items():
        status = "‚úÖ SUCC√àS" if result['success'] else "‚ùå √âCHEC"
        time_str = f"{result['time']:.1f}s"
        print(f"{status} - {notebook_name:<25} ({time_str})")
        if not result['success'] and result['error']:
            print(f"    üîç Erreur: {result['error'][:100]}...")
    
    print(f"\n‚è±Ô∏è  Temps total: {total_time:.1f}s")
    print(f"üéØ R√©sultat global: {'‚úÖ TOUS LES NOTEBOOKS VALID√âS' if overall_success else '‚ùå VALIDATION √âCHOU√âE'}")
    
    # Sauvegarder le rapport
    report_path = Path(__file__).parent / 'outputs' / 'validation_report.json'
    report_path.parent.mkdir(exist_ok=True)
    
    with open(report_path, 'w', encoding='utf-8') as f:
        json.dump({
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'overall_success': overall_success,
            'total_time': total_time,
            'results': results
        }, f, indent=2, ensure_ascii=False)
    
    print(f"üìÑ Rapport sauvegard√©: {report_path}")
    
    return overall_success

if __name__ == "__main__":
    print("üöÄ D√©marrage de la validation des notebooks...")
    
    # V√©rifier que jupyter est install√©
    try:
        subprocess.run(['C:/Users/vtnde/Documents/Projets/ProjetFoncier/venv/Scripts/jupyter.exe', '--version'], capture_output=True, check=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Jupyter n'est pas install√© ou accessible")
        print("üí° Installez avec: pip install jupyter")
        sys.exit(1)
    
    success = validate_notebooks()
    sys.exit(0 if success else 1)